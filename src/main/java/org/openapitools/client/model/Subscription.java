/*
 * OpenPodcast API
 * This is the OpenAPI specification for the OpenPodcast API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Subscription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-17T20:17:50.894234-10:00[Pacific/Honolulu]", comments = "Generator version: 7.7.0")
public class Subscription {
  public static final String SERIALIZED_NAME_FEED_URL = "feed_url";
  @SerializedName(SERIALIZED_NAME_FEED_URL)
  private String feedUrl;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_IS_SUBSCRIBED = "is_subscribed";
  @SerializedName(SERIALIZED_NAME_IS_SUBSCRIBED)
  private Boolean isSubscribed;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_CHANGED = "subscription_changed";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_CHANGED)
  private OffsetDateTime subscriptionChanged;

  public static final String SERIALIZED_NAME_NEW_GUID = "new_guid";
  @SerializedName(SERIALIZED_NAME_NEW_GUID)
  private String newGuid;

  public static final String SERIALIZED_NAME_GUID_CHANGED = "guid_changed";
  @SerializedName(SERIALIZED_NAME_GUID_CHANGED)
  private OffsetDateTime guidChanged;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private OffsetDateTime deleted;

  public Subscription() {
  }

  public Subscription feedUrl(String feedUrl) {
    this.feedUrl = feedUrl;
    return this;
  }

  /**
   * Get feedUrl
   * @return feedUrl
   */
  @javax.annotation.Nonnull
  public String getFeedUrl() {
    return feedUrl;
  }

  public void setFeedUrl(String feedUrl) {
    this.feedUrl = feedUrl;
  }


  public Subscription guid(String guid) {
    this.guid = guid;
    return this;
  }

  /**
   * Get guid
   * @return guid
   */
  @javax.annotation.Nonnull
  public String getGuid() {
    return guid;
  }

  public void setGuid(String guid) {
    this.guid = guid;
  }


  public Subscription isSubscribed(Boolean isSubscribed) {
    this.isSubscribed = isSubscribed;
    return this;
  }

  /**
   * Get isSubscribed
   * @return isSubscribed
   */
  @javax.annotation.Nonnull
  public Boolean getIsSubscribed() {
    return isSubscribed;
  }

  public void setIsSubscribed(Boolean isSubscribed) {
    this.isSubscribed = isSubscribed;
  }


  public Subscription subscriptionChanged(OffsetDateTime subscriptionChanged) {
    this.subscriptionChanged = subscriptionChanged;
    return this;
  }

  /**
   * Get subscriptionChanged
   * @return subscriptionChanged
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSubscriptionChanged() {
    return subscriptionChanged;
  }

  public void setSubscriptionChanged(OffsetDateTime subscriptionChanged) {
    this.subscriptionChanged = subscriptionChanged;
  }


  public Subscription newGuid(String newGuid) {
    this.newGuid = newGuid;
    return this;
  }

  /**
   * Get newGuid
   * @return newGuid
   */
  @javax.annotation.Nullable
  public String getNewGuid() {
    return newGuid;
  }

  public void setNewGuid(String newGuid) {
    this.newGuid = newGuid;
  }


  public Subscription guidChanged(OffsetDateTime guidChanged) {
    this.guidChanged = guidChanged;
    return this;
  }

  /**
   * Get guidChanged
   * @return guidChanged
   */
  @javax.annotation.Nullable
  public OffsetDateTime getGuidChanged() {
    return guidChanged;
  }

  public void setGuidChanged(OffsetDateTime guidChanged) {
    this.guidChanged = guidChanged;
  }


  public Subscription deleted(OffsetDateTime deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeleted() {
    return deleted;
  }

  public void setDeleted(OffsetDateTime deleted) {
    this.deleted = deleted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subscription subscription = (Subscription) o;
    return Objects.equals(this.feedUrl, subscription.feedUrl) &&
        Objects.equals(this.guid, subscription.guid) &&
        Objects.equals(this.isSubscribed, subscription.isSubscribed) &&
        Objects.equals(this.subscriptionChanged, subscription.subscriptionChanged) &&
        Objects.equals(this.newGuid, subscription.newGuid) &&
        Objects.equals(this.guidChanged, subscription.guidChanged) &&
        Objects.equals(this.deleted, subscription.deleted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(feedUrl, guid, isSubscribed, subscriptionChanged, newGuid, guidChanged, deleted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Subscription {\n");
    sb.append("    feedUrl: ").append(toIndentedString(feedUrl)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    isSubscribed: ").append(toIndentedString(isSubscribed)).append("\n");
    sb.append("    subscriptionChanged: ").append(toIndentedString(subscriptionChanged)).append("\n");
    sb.append("    newGuid: ").append(toIndentedString(newGuid)).append("\n");
    sb.append("    guidChanged: ").append(toIndentedString(guidChanged)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("feed_url");
    openapiFields.add("guid");
    openapiFields.add("is_subscribed");
    openapiFields.add("subscription_changed");
    openapiFields.add("new_guid");
    openapiFields.add("guid_changed");
    openapiFields.add("deleted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("feed_url");
    openapiRequiredFields.add("guid");
    openapiRequiredFields.add("is_subscribed");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Subscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Subscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Subscription is not found in the empty JSON string", Subscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Subscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Subscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Subscription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("feed_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feed_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feed_url").toString()));
      }
      if (!jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      if ((jsonObj.get("new_guid") != null && !jsonObj.get("new_guid").isJsonNull()) && !jsonObj.get("new_guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new_guid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Subscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Subscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Subscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Subscription.class));

       return (TypeAdapter<T>) new TypeAdapter<Subscription>() {
           @Override
           public void write(JsonWriter out, Subscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Subscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Subscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Subscription
   * @throws IOException if the JSON string is invalid with respect to Subscription
   */
  public static Subscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Subscription.class);
  }

  /**
   * Convert an instance of Subscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

