/*
 * OpenPodcast API
 * This is the OpenAPI specification for the OpenPodcast API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.Deletion;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.FeedArray;
import org.openapitools.client.model.NewSubscriptions;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PatchedSubscription;
import org.openapitools.client.model.Subscription;
import org.openapitools.client.model.SubscriptionUpdate;
import org.openapitools.client.model.Subscriptions;
import org.openapitools.client.model.Success;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SubscriptionsApi
 */
@Disabled
public class SubscriptionsApiTest {

    private final SubscriptionsApi api = new SubscriptionsApi();

    /**
     * Add new subscriptions for the authenticated user
     *
     * Add one or more new subscriptions for the authenticated user by passing an array of feed URLs in the request body
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addSubscriptionTest() throws ApiException {
        FeedArray feedArray = null;
        NewSubscriptions response = api.addSubscription(feedArray);
        // TODO: test validations
    }

    /**
     * Delete a single subscription entry
     *
     * Deletes a single subscription specified in the path
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubscriptionTest() throws ApiException {
        String guid = null;
        Success response = api.deleteSubscription(guid);
        // TODO: test validations
    }

    /**
     * Retrieve information subscription deletion
     *
     * Retrieve information about a deletion by querying the ID sent in a deletion request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeletionsTest() throws ApiException {
        BigDecimal id = null;
        Deletion response = api.getDeletions(id);
        // TODO: test validations
    }

    /**
     * Retrieve information about a single subscription
     *
     * Retrieve information about a single subscription specified in the path
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionTest() throws ApiException {
        String guid = null;
        Subscription response = api.getSubscription(guid);
        // TODO: test validations
    }

    /**
     * Retrieve all updated subscription information
     *
     * Retrieve all subscription information that has changed since the provided timestamp
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionsTest() throws ApiException {
        OffsetDateTime since = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        Subscriptions response = api.getSubscriptions(since, page, perPage);
        // TODO: test validations
    }

    /**
     * Update a single subscription entry
     *
     * Update information about a single subscription specified in the path
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionTest() throws ApiException {
        String guid = null;
        SubscriptionUpdate subscriptionUpdate = null;
        PatchedSubscription response = api.updateSubscription(guid, subscriptionUpdate);
        // TODO: test validations
    }

}
